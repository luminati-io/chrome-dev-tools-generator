namespace {{rootNamespace}}
{
    using System;
    using System.Collections.Generic;

    public static class EventTypeMap
    {
        private readonly static IDictionary<string, Type> s_methodNameEventTypeDictionary;
        private readonly static IDictionary<Type, string> s_eventTypeMethodNameDictionary;

        static EventTypeMap()
        {
            s_methodNameEventTypeDictionary = new Dictionary<string, Type>()
            {
{{#each events}}
                { "{{EventName}}", typeof({{FullTypeName}}) },
{{/each}}
            };

            s_eventTypeMethodNameDictionary = new Dictionary<Type, string>()
            {
{{#each events}}
                { typeof({{FullTypeName}}), "{{EventName}}" },
{{/each}}
            };
        }

        /// <summary>
        /// Gets the event type corresponding to the specified method name.
        /// </summary>
        public static bool TryGetTypeForMethodName(string methodName, out Type eventType)
        {
            return s_methodNameEventTypeDictionary.TryGetValue(methodName, out eventType);
        }

        /// <summary>
        /// Gets the method name corresponding to the specified event type.
        /// </summary>
        public static bool TryGetMethodNameForType<TEvent>(out string methodName)
            where TEvent : IEvent
        {
            return s_eventTypeMethodNameDictionary.TryGetValue(typeof(TEvent), out methodName);
        }
    }
}

